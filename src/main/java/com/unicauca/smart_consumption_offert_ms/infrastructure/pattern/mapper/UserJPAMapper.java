package com.unicauca.smart_consumption_offert_ms.infrastructure.pattern.mapper;


import com.unicauca.smart_consumption_offert_ms.domain.product.Product;
import com.unicauca.smart_consumption_offert_ms.domain.user.User;
import com.unicauca.smart_consumption_offert_ms.infrastructure.modules.user.dataproviders.jpa.UserJPAEntity;
import org.mapstruct.Mapper;

import java.util.ArrayList;
import java.util.stream.Collectors;

/**
 * Mapper interface for converting between {@link UserJPAEntity} and {@link User}.
 * <p>The implementation of this interface is automatically generated by Map Struct during the build process, ensuring
 * that the mappings are efficient and error-free.</p>
 *
 * @see UserJPAEntity
 * @see User
 * @see EntityMapper
 *
 *
 * **/
@Mapper(componentModel = "spring")
public interface UserJPAMapper extends EntityMapper<UserJPAEntity, User>{

   default User toDomain(UserJPAEntity dto)
   {
       User user = new User();
       user.setId(dto.getId());
       user.setUsername(dto.getUsername());
       ArrayList<Product> products = dto.getWatchList().stream().map(p -> {
           Product product = new Product();
           product.setId(p.getId());
           product.setName(p.getName());
           product.setPrice(p.getPrice());
           return product;
       }).collect(Collectors.toCollection(ArrayList::new));
       user.setWatchList(products);
       return user;
   }
}
